#
## Include for Autoconf
#
# Need $name, $version, $release and $source
# Can receive arguments from $configure_opts and $make_opts
# $use_autogen can enable the ./autogen.sh command, which takes parameters 
#   from ${autogen_opts[@]}
# $use_configure can disable the ./configure command if set to anything 
#   other than "yes".
# $make sets the implementation of make to use. It's default value, 
#   `pkgmake`, means that any make implementation can be used.
# 

case $version in
	devel|dev|trunk)
		: ${dirname:="$name"}
		: ${use_autogen:="yes"}
	;;
	*)
		: ${dirname:="$name-$version"}
	;;
esac

case $use_autogen in
	yes|no);;
	*)use_autogen=no;;
esac

: ${use_configure:=yes}
: ${use_autocheck:=yes}

: ${sharedir_name:=datarootdir}

: ${make:=pkgmake}

errlogs=(${errlogs[@]} 'config\.log')

configure_opts=(
	# Compilation and cross-compilation parameters.
	${CBUILD:+--build=${CBUILD}}
	${CHOST:+--host=${CHOST}}
	${CTARGET:--target=${CTARGET}}
	# Default directories.
	${prefix:+--prefix=$prefix}
	${eprefix:+--exec-prefix=$eprefix}
	${bindir:+--bindir=$bindir}
	${sbindir:+--sbindir=$sbindir}
	${libexecdir:+--libexecdir=$libexecdir}
	${sysconfdir:+--sysconfdir=$sysconfdir}
	${localstatedir:+--localstatedir=$localstatedir}
	${libdir:+--libdir=$libdir}
	${sharedir:+--${sharedir_name}=$sharedir}
	${mandir:+--mandir=$mandir}
	# Anything special given in the Pkgfile.
	${configure_opts[@]}
)

build(){
cd $dirname
	if [[ "$separate_build_dir" = "yes" ]]; then
		mkdir __build__
		cd __build__
	fi
	[[ "$use_autogen" = "yes" ]] && $SRC/$dirname/autogen.sh ${autogen_opts[@]}
	[[ "$use_configure" = "yes" ]] && $SRC/$dirname/configure ${configure_opts[@]}
	${make} ${make_opts[@]}
	${make} ${make_opts[@]} DESTDIR=$PKG install
}

if istrue $use_autocheck; then
	check() {
		cd $dirname
		make check
	}
fi

