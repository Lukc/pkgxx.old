#<
# # Include for CMake
# 
# The `cmake` include file defines the `build()` function of a Pkgfile 
# when included. It is meant to be used to automate the build of 
# softwares using CMake as build system.
# 
# This include uses `pkgmake()` and takes `$separate_build_dir` into
# account.
# 
# ## Important variables
# 
#   * `${cmake_opts[]}` can be used to give additional options to
#     `cmake`. The path to the sources is not required, as 
#     `$SRC/$dirname` is always used.
# 
#>

if ! has cmake ${includes[@]}; then
	# If we are here, this file has been requested for the tools it contains.
	
	function cmake_enable {
		local FLAG="$1"
		local CMAKE_OPT="$2"
		echo -n "-DENABLE_${CMAKE_OPT}="
		if use "$FLAG"; then
			echo "YES"
		else
			echo "NO"
		fi
		iuse=(${iuse[@]//$FLAG} $FLAG)
	}
	
	# We should better use the rest of the file after the recipe has finished
	# being parsed.
	includes=(cmake ${includes[@]//cmake})
	return 0
fi

case $version in
	devel|dev|trunk)
		: ${dirname:="$name"}
	;;
	*)
		: ${dirname:="$name-$version"}
	;;
esac

: ${separate_build_dir:="no"}

cmake_opts=(
	${prefix:+-DPREFIX=$prefix}
	${prefix:+-DCMAKE_INSTALL_PREFIX=$prefix}
	${sysconfdir:+-DSYSCONF_INSTALL_DIR=$sysconfdir}
	${libdir:+-DLIB_INSTALL_DIR=$libdir}
	${datarootdir:+-DDATAROOTDIR=$datarootdir}
	${bindir:+-DBINDIR=$bindir}
	${mandir:+-DMANDIR=$mandir}
	${docdir:+-DDOCDIR=$docdir}
	${cmake_opts[@]}
)

build() {
	cd $dirname
	if [[ "$separate_build_dir" = "yes" ]]; then
		mkdir __build__
		cd __build__
	fi
	cmake $SRC/$dirname ${cmake_opts[@]}
	pkgmake ${make_opts[@]}
	pkgmake DESTDIR=$PKG ${make_opts[@]} install
}

# vim: syntax=sh shiftwidth=4 tabstop=4
