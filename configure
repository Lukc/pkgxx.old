#!/usr/bin/env zsh

REVISION="`git rev-list --all 2>/dev/null | wc -l | sed -e 's| *||g'`"
VERSION="0.11.2-devel-$REVISION"

dist () {
	# FIXME: Put this somewhere else?
	[[ -e Makefile ]] && make clean
	[[ -e pkg++-$VERSION ]] && rm -rf pkg++-$VERSION
	# Cleaning, just in case we might want to built that a day.
	for i in .tar.{gz,bz2,lzma,lzo,xz,Z} .zip .sqsh; do
		[[ -e pkg++-$VERSION$i ]] && rm -f pkg++-$VERSION$i
	done
	(
		# Removing hidden and “backup files” from some text editors.
		files=($(find . | egrep -v "(~$|/\\.|^\\.$)"))
		mkdir pkg++-$VERSION
		# Copying to the “distdir” from which we create the tarballs.
		tar cf - ${files[*]} | (cd pkg++-$VERSION/; tar xf -)
		tar czf pkg++-$VERSION{.tar.gz,}
		tar cjf pkg++-$VERSION{.tar.bz2,}
		tar cJf pkg++-$VERSION{.tar.xz,}
	)
}

clean-dist () {
	rm -rf pkg++-$VERSION* 
}

arch () {
	arch="$(uname -m)"
	case ${arch} in
		alpha|ia64|m68k|ppc|ppc64|x86_64|loongson) ;;
		# loongson is the arch of Loongson (MIPS64el) processors on
		#+ OpenBSD.
		arm*) arch=arm ;;
		i?86) arch=x86 ;;
		mips*) arch=mips ;;
		parisc*) arch=hppa ;;
		"Power Macintosh") arch=ppc ;;
		s390*) arch=s390 ;;
		sh*) arch=sh ;;
		sparc*) arch=sparc ;;
		*)
			echo "Nobody tested your architecture. Pease use --arch=<your arch> to set it manually. The default value would be $(uname -s)." >&2
			echo "The only known values are, for now, alpha, ia64, m68k, ppc, ppc64, x86, x86_64, arm, mips, hppa, s390, sh and sparc." >&2
		;;
	esac
	if has $PACKAGE_MANAGER pacman{,-g2} rpm nhopkg; then
		case ${arch} in
			x86) arch=i686;;
		esac
	elif [[ $PACKAGE_MANAGER = dpkg ]]; then
		case ${arch} in
			x86) arch=i386;;
			x86_64) arch=amd64;;
			arm) arch=armel;;
		esac
	fi
	echo ${arch}
}

kernel () {
	kernel="$(uname -s)"
	case ${kernel} in
		Linux|FreeBSD|OpenBSD|NetBSD) ;;
		CYGWIN*) kernel=Cygwin ;;
		*)
			echo "Nobody tested your kernel. Please, use --kernel=<your kernel> to set it manually. The default value would be $(uname -s)." >&2
			echo "The only known values are, for now, Linux, OpenBSD, NetBSD and FreeBSD." >&2
			exit 1
		;;
	esac
	echo ${kernel}
}

package_manager () {
	pm=
	if checking_for_bin "dpkg" &> /dev/null; then
		: ${pm:=dpkg}
	elif checking_for_bin "rpm" &> /dev/null; then
		: ${pm:=rpm}
	elif checking_for_bin "pacman-g2" &> /dev/null; then
		: ${pm:=pacman-g2}
	elif checking_for_bin "pacman" &> /dev/null; then
		: ${pm:=pacman}
	elif checking_for_bin "nhopkg" &> /dev/null; then
		: ${pm:=nhopkg}
	elif checking_for_bin "installpkg" &> /dev/null \
		&& checking_for_bin "updatepkg" \
		&& checking_for_bin "makepkg";
	then
		: ${pm:=pkgtools}
	elif checking_for_bin "pkgadd" &> /dev/null \
		&& checking_for_bin "pkginfo" &> /dev/null \
		&& checking_for_bin "pkgrm" &> /dev/null;
	then
		: ${pm:=pkgutils}
	else
		: ${pm="Unknown"}
	fi
	echo ${pm}
}

distribution () {
	if [[ -e /usr/bin/crux ]]; then
		: ${DISTRIBUTION:="Crux"}
	elif [[ -e /etc/frugalware-release ]]; then
		: ${DISTRIBUTION:="Frugalware"}
	elif [[ -e /etc/fedora-release ]]; then
		: ${DISTRIBUTION:="Fedora"}
	elif [[ -e /etc/mandriva-release ]]; then
		: ${DISTRIBUTION:="Mandriva"}
	elif [[ -e /etc/arch-release ]]; then
		: ${DISTRIBUTION:="Arch"}
	elif [[ $PACKAGE_MANAGER = pkgtools ]]; then
		: ${DISTRIBUTION:="Slackware"}
	elif [[ $PACKAGE_MANAGER = dpkg ]] && checking_for_bin "apt-get" &> /dev/null;
	then
		: ${DISTRIBUTION:="Debian"}
	elif [[ "$KERNEL" = FreeBSD ]]; then
		: ${DISTRIBUTION:="FreeBSD"}
	else
		: ${DISTRIBUTION:="Unknown"}
	fi
	echo $DISTRIBUTION
}

checking_for () {
	echo -n "Checking for $1... "
}

checking_for_bin () {
	checking_for $1
	for i in `echo "$PATH" | sed "s|:| |g"`; do
		if [[ -x $i/$1 ]]; then
			echo "yes"
			return 0
		fi
	done
	echo "no"
	return 1
}

has () {
	local flag="$1"
	shift 1
	for i in $@; do
		if [[ "$flag" = "$i" ]]; then
			return 0
		fi
	done
	return 1
}

print_help () {
	echo "\`configure' configures pkg++ $VERSION to adapt to many kinds of systems."
	echo 
	echo "Usage: ./configure [OPTION]..."
	echo 
	echo "Defaults for the options are specified in brackets."
	echo 
	echo "Configuration:"
	echo "  -h, --help              display this help and exit"
	echo "  -V, --version           display version information and exit"
	echo 
	echo "Direct Build:"
	echo "  -d, --dist              create tarballs of pkg++"
	echo "  -D, --clean-dist        remove pkg++ tarballs and distdir"
	echo 
	echo "Installation directories:"
	echo "  --prefix=PREFIX         install architecture-independent files in PREFIX"
	echo "                          [/usr]"
	echo "  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX"
	echo "                          [PREFIX]"
	echo 
	echo "Optional Features: (none)"
	echo 
	echo "Fine tuning of the installation directories:"
	echo "  --sharedir=DIR             read-only architecture-independent data [PREFIX/share]"
	echo "  --mandir=DIR               man documentation [SHAREDIR/man]"
	echo "  --sysconfdir=DIR           read-only single-machine data [/etc]"
	echo 
	echo "System Informations:"
	echo "  --package-manager=         Choose the package manager to use behind pkg++."
	echo "  --arch=                    Set the architecture's name."
	echo "  --kernel=                  Set the kernel's name."
	echo 
	echo "By default, \`make install' will install all the files in"
	echo "\`/usr/bin', \`/usr/lib' etc.  You can specify"
	echo "an installation prefix other than \`/usr' using \`--prefix',"
	echo "for instance \`--prefix=$HOME'."

}

USE_GSED=
USE_GFIND=

for arg in $@; do
	case $arg in
		-h|--help)
			print_help
			exit 0
		;;
		-V|--version)
			echo "pkg++ $VERSION"
			exit 0
		;;
		-d|--dist)
			dist
			exit $?
		;;
		-D|--clean-dist)
			clean-dist
			exit $?
		;;
		--with-*)
			with="`echo "$arg" | sed "s|--with-||"`"
			case $with in
				*)
					echo "Unknown package $with."
					echo "Please make $0 --help for more informations."
				;;
			esac
		;;
		--without-*)
			without="`echo "$arg" | sed "s|--without-||"`"
			case $without in
				*)
					echo "Unknown package $without."
					echo "Please make $0 --help for more informations."
				;;
			esac
		;;
		--prefix=*)
			PREFIX="`echo "$arg" | sed "s|--prefix=||"`"
		;;
		--exec-prefix=*)
			EPREFIX="`echo "$arg" | sed "s|--exec-prefix=||"`"
		;;
		--sharedir=*)
			SHAREDIR="`echo "$arg" | sed "s|--sharedir=||"`"
		;;
		--mandir=*)
			MANDIR="`echo "$arg" | sed "s|--mandir=||"`"
		;;
		--sysconfdir=*)
			SYSCONFDIR="`echo "$arg" | sed "s|--sysconfdir=||"`"
		;;
		--libexecdir=*)
			LIBEXECDIR="`echo "$arg" | sed "s|--libexecdir=||"`"
		;;
		--package-manager=*)
			PACKAGE_MANAGER="`echo "$arg" | sed "s|--package-manager=||"`"
		;;
		--arch=*)
			ARCHITECTURE="`echo "$arg" | sed "s|--arch=||"`"
		;;
		--kernel=*)
			KERNEL="`echo "$arg" | sed "s|--kernel=||"`"
		;;
		*)
			echo "Unknown parameter: $arg."
			echo "Please make $0 --help for more informations."
		;;
	esac
done

: ${PREFIX:=/usr}
: ${EPREFIX:=$PREFIX}
: ${SHAREDIR:=$PREFIX/share}
: ${MANDIR:=$SHAREDIR/man}
: ${SYSCONFDIR:=/etc}
: ${LIBEXECDIR:=$EPREFIX/libexec}

: ${PACKAGE_MANAGER:=`package_manager`}
: ${KERNEL:=`kernel`}
: ${ARCHITECTURE:=`arch`}
: ${DISTRIBUTION:=`distribution`}

checking_for "gcc >= 4"
if checking_for_bin gcc &> /dev/null; then
	GCC_VERSION=$(gcc --version | head -n1 | cut -d " " -f 3)
	if (( `echo $GCC_VERSION | cut -d . -f 1` < 4 )); then
		echo "no"
		echo "GCC is recommended in version 4 or more." >&2
		echo "You may encounter problems or failures building pkg++ without it." >&2
		echo "It is not, however, a runtime dependency." >&2
	else
		echo "yes"
	fi
else
	echo "GCC is needed to configure and install pkg++, but not to use it." >&2
	exit 1
fi

checking_for "bash >= 4.1"
if checking_for_bin bash &> /dev/null; then
	BASH_VERSION=$(bash --version | head -n 1 | cut -d ' ' -f 4 | sed 's|(.*||')
	if	(( `echo $BASH_VERSION | cut -d . -f 1` >= 4 )) && \
		(( `echo $BASH_VERSION | cut -d . -f 2` >= 1 ));
	then
		echo "yes"
	else
		echo "Bash is found, but is not up to date. pkg++ will surely work, but it is untested." >&2
	fi
else
	echo "no"
	echo "You will need a recent enough bash version to use pkg++. Without bash, you will not be able to install or use pkg++." >&2
	echo "However, pkg++ will surely work with older versions of bash, it is just untested." >&2
fi

checking_for "pkgtools"
if checking_for_bin "installpkg" &> /dev/null && checking_for_bin "removepkg" &> /dev/null; then
	echo "yes"
	: ${PACKAGE_MANAGER:=pkgtools}
else
	echo "no"
	if [[ $PACKAGE_MANAGER = pkgtools ]]; then
		echo "You will need the pkgtools to install you packages." >&2
	fi
fi

if checking_for_bin "dpkg"; then
	: ${PACKAGE_MANAGER:=dpkg}
else
	if [[ $PACKAGE_MANAGER = dpkg ]]; then
		echo "You will need dpkg to build Debian packages." >&2
	fi
fi

if checking_for_bin "rpm"; then
	: ${PACKAGE_MANAGER:=rpm}
else
	if [[ $PACKAGE_MANAGER = rpm ]]; then
		echo "You will need RPM to build and install RPM packages." >&2
	fi
fi

if checking_for_bin "pacman"; then
	: ${PACKAGE_MANAGER:=pacman}
else
	if [[ $PACKAGE_MANAGER = pacman ]]; then
		echo "You will need pacman to install your packages." >&2
	fi
fi
if checking_for_bin "pacman-g2"; then
	: ${PACKAGE_MANAGER:=pacman-g2}
else
	if [[ $PACKAGE_MANAGER = pacman-g2 ]]; then
		echo "You will need pacman-g2 to install fpm packages." >&2
	fi
fi

: ${PACKAGE_MANAGER:=pkgutils}

echo "Summary:"
echo "  Architecture:           $ARCHITECTURE"
echo "  Kernel:                 $KERNEL"
echo "  Package manager:        $PACKAGE_MANAGER"

case $ARCHITECTURE in
	x86)		CC_MARCH=i686		;;
	x86_64|amd64)	CC_MARCH=x86-64		;;
	*)		CC_MARCH=$ARCHITECTURE	;;
esac

if (( `echo $GCC_VERSION | cut -d . -f 2` >= 4 )); then
	CPPFLAGS="$CPPFLAGS -x c"
fi
CPPFLAGS="$CPPFLAGS -E -P -D_VERSION=\"$VERSION\""
CPPFLAGS="$CPPFLAGS -D_ARCH=\"$ARCHITECTURE\" -D_KERNEL=\"$KERNEL\" $CPPFLAGS"
CPPFLAGS="$CPPFLAGS -D_PACKAGE_MANAGER=\"$PACKAGE_MANAGER\""
CPPFLAGS="$CPPFLAGS -D_SHAREDIR=\\\"$SHAREDIR\\\" -D_SYSCONFDIR=\\\"$SYSCONFDIR\\\""
CPPFLAGS="$CPPFLAGS -D_LIBEXECDIR=\\\"$LIBEXECDIR\\\""
CPPFLAGS="$CPPFLAGS -include $PWD/src/error.sh.h -include $PWD/src/footprints.sh.h -include $PWD/src/modules.sh.h"

case $PACKAGE_MANAGER in
	"") ;;
	pacman-g2)
		CPPFLAGS="$CPPFLAGS -D__pacman=pacman -D__pacmang2=pacman-g2"
	;;
	*)
		CPPFLAGS="$CPPFLAGS -D__$PACKAGE_MANAGER=$PACKAGE_MANAGER"
	;;
esac

configure() {
	sed -e "s|@ARCH@|$ARCHITECTURE|"\
		-e "s|@KERNEL@|$KERNEL|"\
		-e "s|@VERSION@|$VERSION|"\
		-e "s|@PACKAGE_MANAGER@|$PACKAGE_MANAGER|"\
		-e "s|@MARCH@|$CC_MARCH|"\
		-e "s|@GMAKE@|$GMAKE_PATH|"\
		-e "s|@PREFIX@|$PREFIX|"\
		-e "s|@SHAREDIR@|$SHAREDIR|"\
		-e "s|@SYSCONFDIR@|$SYSCONFDIR|"\
		 $1 > $1.tmp
	mv $1.tmp $1
}

# FIXME: Isn’t it possible to do this in the produced Makefile?
echo "Creation of \`defaults/userland'..."
zsh userland.zsh > defaults/userland

echo "Creation of \`Makefile'..."
DIR () {
	echo "@echo -e \"  \033[34m[DIR]\033[00m        \033[37m$1\033[00m\";[ -d \$(DESTDIR)/$1 ] || mkdir -p \$(DESTDIR)/$1"
}
BUILD () {
	if (( `echo $GCC_VERSION | cut -d . -f 2` >= 4 )); then
		echo "@echo -e \"  \033[37m[CPP]\033[00m        \033[37m${2:+$2/}$1\033[00m\"; cpp \$(CPPFLAGS) ${2:+$2/}$1$3 > ${2:+$2/}$1"
	else
		echo -n "@echo -e \"  \033[37m[CPP]\033[00m        \033[37m${2:+$2/}$1\033[00m\";"
		echo -n "cpp \$(CPPFLAGS) ${2:+$2/}$1$3 | sed -e 's/^	*//;s/^ *//;/#if.*/,/#else/d;/^#/d;s|\\	||'"
		echo " > ${2:+$2/}$1"
	fi
}
INSTALL () {
	echo "@echo -e \"  \033[32m[INS]\033[00m        \033[37m$2\033[00m -> \033[37m$3/$2\033[00m\";install -m$1 $2 \$(DESTDIR)/$3/$(basename $2)"
}
INSTALL_F () {
	echo "@echo -e \"  \033[32m[INS]\033[00m        \033[37m$2\033[00m -> \033[37m$4/$3\033[00m\";install -m$1 $2 \$(DESTDIR)/$4/$3"
}
REMOVE () {
	echo "@echo -e \"  \033[33m[REM]\033[00m         \033[37m$1\033[00m\";[ -e $1 ] && rm -rf $1 || true"
}
RULE () {
	echo "@echo -e \"  \033[37m$1\033[00m  \t $2\""
}
ZCOMPILE () {
	echo "@-echo -e \"  \033[35m[ZCO]\033[00m        \033[37m$1\033[00m\";echo 'zcompile \"\$(DESTDIR)$1\"' | zsh"
}
cat > Makefile << EOF
# Beginning of Makefile

DESTDIR = 
BINDIR = $EPREFIX/bin
SHAREDIR = $SHAREDIR
LIBEXECDIR = $LIBEXECDIR
ETCDIR = $SYSCONFDIR
MANDIR = $MANDIR

PKGXX_VERSION=$VERSION

CC = gcc
CFLAGS =
CPPFLAGS = $CPPFLAGS

build: pkgxx

help:
	@echo "The available rules for this Makefile are:"
	`RULE "config   " "Install the configuration files of pkg++."`
	`RULE "man      " "Install the manual pages of pkg++."`
	`RULE "pkgxx    " "Install pkgxx, it's include files and the defaults files."`
	`RULE "update   " "Make the man and pkgxx rules."`
	`RULE "install  " "Make the man, pkgxx and config rules."`
	`RULE "clean    " "Remove configured files."`

defaults/distributions:
	$(echo "@echo -e \"  \033[37m[ZSH]\033[00m        \033[37mdefaults/distributions\033[00m\";")
	@zsh ./distributions.zsh > defaults/distributions

$(for module in `cd modules; ls *.zsh`; do
	module=${module%.zsh}
	echo "modules/$module:"
	echo "	@sed -e \"s|@BINDIR@|\$(BINDIR)|\"\
		-e \"s|@SHAREDIR@|\$(SHAREDIR)|\"\
		-e \"s|@LIBEXECDIR@|\$(LIBEXECDIR)|\"\
		-e \"s|@SYSCONFDIR@|\$(ETCDIR)|\"\
		modules/$module.zsh > modules/$module"
	echo "	@echo -e \"  \033[36m[MOD]\033[00m        \033[37mmodules/$module\033[00m\""
	echo
done)

modules: $(cd modules; for i in `ls *.zsh | sed -e "s|\.zsh||"`; do echo -n "modules/$i "; done)

pkgxx: defaults/distributions
	`BUILD main src .sh.c`
	mv src/main pkg++.tmp
#	cpp $CPPFLAGS -x c "src/main.sh.c" > "pkg++.tmp"
	echo "#!/usr/bin/env zsh" > pkg++
	cat pkg++.tmp | sed '/^\$\$/d' >> pkg++

has:
	(cd tools; \
		\$(CC) \$(CFLAGS) has.c -o ../has)

config-install:
	`DIR \$\(ETCDIR\)`
	`DIR \$\(ETCDIR\)/profiles`
	`INSTALL 0644 pkg++.conf \$\(ETCDIR\)`

man-install:
	`DIR \$\(MANDIR\)`
	`DIR \$\(MANDIR\)/man8`
	`DIR \$\(MANDIR\)/man5`
	`DIR \$\(MANDIR\)/fr.UTF-8/man5`
	`INSTALL_F 0644 man/pkg++.8 pkg++.8 \$\(MANDIR\)/man8`
	`INSTALL_F 0644 man/pkg++.conf.5 pkg++.conf.5 \$\(MANDIR\)/man5`
	`INSTALL_F 0644 man/pkgfile.5 pkgfile.5 \$\(MANDIR\)/man5`
	`INSTALL_F 0644 man/fr.pkgfile.5 pkgfile.5 \$\(MANDIR\)/fr.UTF-8/man5`

# FIXME: The comment below is simple enough to understand the problem.
pkgxx-install: pkgxx has-install # has-install is needed for \$(LIBEXECDIR)
	`DIR \$\(BINDIR\)`
	`DIR \$\(SHAREDIR\)/pkg++/includes`
	`DIR \$\(SHAREDIR\)/pkg++/defaults`
	`DIR \$\(ETCDIR\)/pkg++/defaults`
	`INSTALL 0755 pkg++ \$\(BINDIR\)`
	`ZCOMPILE '$(BINDIR)/pkg++'`
	`for include in $(ls includes/); do
		INSTALL 0644 includes/$include \$\(SHAREDIR\)/pkg++/includes
		echo -ne "\t"
	done`
	`INSTALL 0644 defaults/distributions	\$\(ETCDIR\)/pkg++/defaults`
	`INSTALL 0644 defaults/userland		\$\(ETCDIR\)/pkg++/defaults`
	$(for default in `cd defaults; ls *.zsh`; do
		# FIXME: In the future, we might want to disable NLS without having the packager to do it. (defaults/use)
		default=${default%.zsh}
		echo -ne "\t"
		INSTALL_F 0644 defaults/$default.zsh $default \$\(ETCDIR\)/pkg++/defaults
	done)
	`INSTALL 0755 tools/opkgmk.sh		\$\(LIBEXECDIR\)/pkg++/`
	`INSTALL 0755 tools/xxrocks.lua		\$\(LIBEXECDIR\)/pkg++/`
	`INSTALL 0755 tools/pkgbuild.bash	\$\(LIBEXECDIR\)/pkg++/`
	if ! [ -e \$(DESTDIR)\$(BINDIR)/pkgxx ]; then \
		ln -s \$(BINDIR)/pkg++ \$(DESTDIR)\$(BINDIR)/pkgxx; \
	fi

modules-install: modules
	`DIR \$\(SHAREDIR\)/pkg++/modules`
$(for module in `cd modules; ls *.zsh`; do
	module=${module%.zsh}
	echo "	`INSTALL 0644 modules/$module \$\(SHAREDIR\)/pkg++/modules`"
	echo
done)

has-install: has
	`DIR \$\(LIBEXECDIR\)/pkg++`
	`INSTALL 755 has \$\(LIBEXECDIR\)/pkg++/`

update: pkgxx-install man-install has-install modules-install

install: pkgxx-install config-install man-install has-install modules-install

clean:
	`REMOVE pkg++`
	`REMOVE pkg++.tmp`
	`REMOVE pkg++.conf`
	`REMOVE man/pkg++.8`
	`REMOVE man/pkg++.conf.5`
	`REMOVE man/pkgfile.5`
	`REMOVE man/fr.pkgfile.5`
	`REMOVE Makefile`
	`REMOVE defaults/distributions`
	`REMOVE defaults/prefixes`
	`REMOVE defaults/cross`
	`REMOVE defaults/userland`
	`REMOVE defaults/uses`
	`REMOVE src/config.sh.h`
	`REMOVE has`
$(for module in `cd modules; ls *.zsh`; do
	echo "	`REMOVE modules/${module%.zsh}`"
done)

pkgfiles:
	sed -e "s|@VERSION@|\${PKGXX_VERSION}|g" Pkgfile.Crux.in > Pkgfile.Crux
	sed -e "s|@VERSION@|\${PKGXX_VERSION}|g" Pkgfile.Nutritive.in > Pkgfile.Nutritive
	sed -e "s|@VERSION@|\${PKGXX_VERSION}|g" Pkgfile.NuTyX.in > Pkgfile.NuTyX
	sed -e "s|@VERSION@|\${PKGXX_VERSION}|g" Pkgfile.devel.in > Pkgfile.devel

# End of file
EOF

cp "pkg++.conf.in" "pkg++.conf"
cp man/{"pkg++.8.in","pkg++.8"}
cp man/{"pkg++.conf.5.in","pkg++.conf.5"}
cp man/{"pkgfile.5.in","pkgfile.5"}
cp man/{"fr.pkgfile.5.in","fr.pkgfile.5"}
configure "man/pkg++.8"
configure "man/pkg++.conf.5"
configure "man/pkgfile.5"
configure "pkg++.conf"

echo "Configuration done."

