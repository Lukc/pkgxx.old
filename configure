#!/usr/bin/env bash

REVISION="`git rev-list --all | wc -l`"
VERSION="0.7.4-devel-$REVISION"

arch () {
	arch="$(uname -m)"
	case ${arch} in
		alpha|ia64|m68k|ppc|ppc64|x86_64) ;;
		arm*) arch=arm ;;
		i?86) arch=x86 ;;
		mips*) arch=mips ;;
		parisc*) arch=hppa ;;
		"Power Macintosh") arch=ppc ;;
		s390*) arch=s390 ;;
		sh*) arch=sh ;;
		sparc*) arch=sparc ;;
		*)
			echo "Nobody tested your architecture. Pease use --arch=<your arch> to set it manually. The default value would be $(uname -s)."
			echo "The only known values are, for now, alpha, ia64, m68k, ppc, ppc64, x86, x86_64, arm, mips, hppa, s390, sh and sparc."
		;;
	esac
	if [[ $PACKAGE_MANAGER =~ (pacman-g2|rpm) ]]; then
		case ${arch} in
			x86) arch=i686;;
		esac
	fi
	if [[ $PACKAGE_MANAGER = dpkg ]]; then
		case ${arch} in
			x86) arch=i386;;
			x86_64) arch=amd64;;
			arm) arch=armel;;
		esac
	fi
	echo ${arch}
}

kernel () {
	kernel="$(uname -s)"
	case ${kernel} in
		Linux|FreeBSD) ;;
		CYGWIN*) kernel=Cygwin ;;
		*)
			echo "Nobody tested your kernel. Please, use --kernel=<your kernel> to set it manually. The default value would be $(uname -s)."
			echo "The only known values are, for now, Linux and FreeBSD."
			exit 1
		;;
	esac
	echo ${kernel}
}

package_manager () {
	pm=
	if checking_for_bin "dpkg" &> /dev/null; then
		: ${pm:=dpkg}
	elif checking_for_bin "rpm" &> /dev/null; then
		: ${pm:=rpm}
	elif checking_for_bin "pacman-g2" &> /dev/null; then
		: ${pm:=pacman-g2}
	elif checking_for_bin "installpkg" &> /dev/null \
		&& checking_for_bin "updatepkg" \
		&& checking_for_bin "makepkg";
	then
		: ${pm:=pkgtools}
	elif checking_for_bin "pkgadd" &> /dev/null \
		&& checking_for_bin "pkginfo" &> /dev/null \
		&& checking_for_bin "pkgrm" &> /dev/null;
	then
		: ${pm:=pkgutils}
	else
		: ${pm="Unknown"}
	fi
	echo ${pm}
}

distribution () {
	if grep -q CRUX /etc/issue &>/dev/null; then
		: ${DISTRIBUTION:="Crux"}
	elif [[ -e /etc/frugalware-release ]]; then
		: ${DISTRIBUTION:="Frugalware"}
	elif [[ -e /etc/mandriva-release ]]; then
		: ${DISTRIBUTION:="Mandriva"}
	elif [[ -e /etc/arch-release ]]; then
		: ${DISTRIBUTION:="Arch"}
	elif [[ $PACKAGE_MANAGER = pkgtools ]]; then
		: ${DISTRIBUTION:="Slackware"}
	elif [[ $PACKAGE_MANAGER = dpkg ]] && checking_for_bin "apt-get" &> /dev/null;
	then
		: ${DISTRIBUTION:="Debian"}
	elif [[ "$KERNEL" = FreeBSD ]]; then
		: ${DISTRIBUTION:="FreeBSD"}
	else
		: ${DISTRIBUTION:="Unknown"}
	fi
	echo $DISTRIBUTION
}

checking_for () {
	echo -n "Checking for $1... "
}

checking_for_bin () {
	checking_for $1
	for i in `echo "$PATH" | sed "s|:| |g"`; do
		if [[ -x $i/$1 ]]; then
			echo "yes"
			return 0
		fi
	done
	echo "no"
	return 1
}

print_help () {
	echo "\`configure' configures pkg++ $VERSION to adapt to many kinds of systems."
	echo 
	echo "Usage: ./configure [OPTION]... [VAR=VALUE]..."
	echo 
	echo "Defaults for the options are specified in brackets."
	echo 
	echo "Configuration:"
	echo "  -h, --help              display this help and exit"
	echo "  -V, --version           display version information and exit"
	echo 
	echo "Installation directories:"
	echo "  --prefix=PREFIX         install architecture-independent files in PREFIX"
	echo "                          [/usr]"
	echo "  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX"
	echo "                          [PREFIX]"
	echo 
	echo "Optional Features:"
	echo "  --without-curl             Disable cURL support."
	echo "  --without-wget             Disable wget support. [UNRECOMMENDED]"
	echo "  --with-dpkg                Disable pkgutils support and add dpkg support. [UNCOMPLETE]"
	echo "  --with-bsdtar              Use bsdtar instead of GNU tar for compression/decompression."
	echo "  --with-gtar                Use GNU tar instead of bsdtar for compression/decompression."
	echo "  --without-gsed             Use non-GNU sed. Slower but usable on non-GNU userlands."
	echo "  --without-gfind            Use non-GNU find. Slower but usable on non-GNU userlands."
	echo 
	echo "By default, \`make install' will install all the files in"
	echo "\`/usr/bin', \`/usr/lib' etc.  You can specify"
	echo "an installation prefix other than \`/usr' using \`--prefix',"
	echo "for instance \`--prefix=$HOME'."

}

PREFIX=/usr
EPREFIX=$PREFIX

USE_CURL=
USE_GSED=
USE_GFIND=
USE_BSDTAR=
USE_GTAR=
GTAR_NAME=
GMAKE_PATH=

for arg in $@; do
	case $arg in
		--help)
			print_help
			exit 0
		;;
		--with-*)
			with="`echo "$arg" | sed "s|--with-||"`"
			case $with in
				curl)
					USE_CURL=true
				;;
				bsdtar|libarchive)
					USE_BSDTAR=true
				;;
				gtar|gnu-tar)
					USE_GTAR=true
				;;
				gsed|gnu-sed)
					USE_GSED=true
				;;
				gfind|gnu-find)
					USE_GFIND=true
				;;
				*)
					echo "Unknown package $without."
					echo "Please make $0 --help for more informations."
				;;
			esac
		;;
		--without-*)
			without="`echo "$arg" | sed "s|--without-||"`"
			case $without in
				curl)
					USE_CURL=false
				;;
				bsdtar|libarchive)
					USE_BSDTAR=false
				;;
				gtar|gnu-tar)
					USE_GTAR=false
				;;
				gsed|gnu-sed)
					USE_GSED=false
				;;
				gfind|gnu-find)
					USE_GFIND=false
				;;
				*)
					echo "Unknown package $without."
					echo "Please make $0 --help for more informations."
				;;
			esac
		;;
		--prefix=*)
			PREFIX="`echo "$arg" | sed "s|--prefix=||"`"
		;;
		--exec-prefix=*)
			EPREFIX="`echo "$arg" | sed "s|--exec-prefix=||"`"
		;;
		--package-manager=*)
			PACKAGE_MANAGER="`echo "$arg" | sed "s|--package-manager=||"`"
		;;
		--arch=*)
			ARCHITECTURE="`echo "$arg" | sed "s|--arch=||"`"
		;;
		--kernel=*)
			KERNEL="`echo "$arg" | sed "s|--kernel=||"`"
		;;
		--distribution=*)
			DISTRIBUTION="`echo "$arg" | sed "s|--distribution=||"`"
		;;
		*)
			echo "Unknown parameter: $arg."
			echo "Please make $0 --help for more informations."
		;;
	esac
done

: ${PACKAGE_MANAGER:=`package_manager`}
: ${KERNEL:=`kernel`}
: ${ARCHITECTURE:=`arch`}
: ${DISTRIBUTION:=`distribution`}

if ! checking_for_bin gcc; then
	echo "GCC is needed to configure and install pkg++, but not to use it."
	exit 1
fi

checking_for "bash >= 4.1"
BASH_VERSION=$(bash --version | head -n 1 | cut -d ' ' -f 4 | sed 's|(.*||')
if	checking_for_bin bash &> /dev/null; then
	if	(( `echo $BASH_VERSION | cut -d . -f 1` >= 4 )) && \
		(( `echo $BASH_VERSION | cut -d . -f 2` >= 1 ));
	then
		echo "yes"
	else
		echo "Bash is found, but is not up to date. pkg++ will surely work, but it is untested." >&2
	fi
else
	echo "no"
	echo "You will need a recent enough bash version to use pkg++. Without bash, you will not be able to install or use pkg++." >&2
	echo "However, pkg++ will surely work with older versions of bash, it is just untested." >&2
fi

checking_for "GNU tar"
if checking_for_bin gtar &> /dev/null; then
	GTAR_NAME="`type -p gtar`"
	: ${USE_GTAR:=true}
	echo "yes"
elif tar --version | grep -q "GNU"; then
	GTAR_NAME="`type -p tar`"
	: ${USE_GTAR:=true}
	echo "yes"
else
	: ${USE_BSDTAR:=false}
	echo "no"
fi

if checking_for_bin bsdtar; then
	: ${USE_BSDTAR:=true}
else
	if ! $USE_GTAR; then
		USE_BSDTAR=true
		echo "You will need GNU tar or bsdtar to extract files and build packages."
		echo "pkg++ will be configured to use bsdtar."
	else
		: ${USE_BSDTAR:=false}
	fi
fi

if checking_for_bin curl; then
	: ${USE_CURL:=true}
else
	: ${USE_CURL:=false}
fi
if ! checking_for_bin wget && ! $USE_CURL; then
	echo "You will need wget or curl to be able to download files directly with pkg++."
	echo "pkg++ will be configured to use wget."
fi

checking_for "GNU sed"
if sed --version 2> /dev/null | grep -q "GNU" &> /dev/null; then
	: ${USE_GSED:=true}
	echo "yes"
else
	: ${USE_GSED:=false}
	echo "no"
fi

checking_for "GNU find"
if find --version 2> /dev/null | grep -q "GNU" &> /dev/null; then
	: ${USE_GFIND:=true}
	echo "yes"
else
	: ${USE_GFIND:=false}
	echo "no"
fi

checking_for "GNU Make"
CONTINUE=true
for i in `echo "$PATH" | sed "s|:| |g"`; do
	if [[ -x $i/make ]]; then
		if $i/make --version 2> /dev/null | grep -q "GNU Make"; then
			GMAKE_PATH="$i/make"
		fi
	elif [[ -x $i/gmake ]]; then
		if $i/gmake --version 2> /dev/null | grep -q "GNU Make"; then
			GMAKE_PATH="$i/gmake"
		fi
	fi
done
if [[ -n "$GMAKE_PATH" ]]; then
	echo "yes"
else
	echo "no"
	echo "You need GNU Make to build most packages." >&2
	echo "pkg++ can not be built if GNU Make is not present.." >&2
	echo "If GNU Make is installed but not found, try to add it's path in \$PATH. The 
\$PATH variable just need to be temporary adapted." >&2
	exit 1
fi

checking_for "pkgtools"
if checking_for_bin "installpkg" &> /dev/null && checking_for_pin "removepkg" &> /dev/null; then
	echo "yes"
	: ${PACKAGE_MANAGER:=pkgtools}
else
	echo "no"
	if [[ $PACKAGE_MANAGER = pkgtools ]]; then
		echo "You will need the pkgtools to install you packages." >&2
	fi
fi

if checking_for_bin "dpkg"; then
	: ${PACKAGE_MANAGER:=dpkg}
else
	if [[ $PACKAGE_MANAGER = dpkg ]]; then
		echo "You will need dpkg to build Debian packages." >&2
	fi
fi

if checking_for_bin "rpm"; then
	: ${PACKAGE_MANAGER:=rpm}
else
	if [[ $PACKAGE_MANAGER = rpm ]]; then
		echo "You will need RPM to build and install RPM packages." >&2
	fi
fi

if checking_for_bin "pacman-g2"; then
	: ${PACKAGE_MANAGER:=pacman-g2}
else
	if [[ $PACKAGE_MANAGER = pacman-g2 ]]; then
		echo "You will need pacman-g2 to install fpm packages." >&2
	fi
fi

if ! [[ $PACKAGE_MANAGER =~ (dpkg|rpm|pkgtools|pkgutils|pacman-g2) ]]; then
	cat << EOF >&2
Your package manager is not known. If you want pkg++ to be built for a 
particular package manager, use the --package-manager=<your-package-manager> 
flag to the configure script.
EOF
	exit 1
fi

echo "Summary:"
echo "  Architecture:           $ARCHITECTURE"
echo "  Kernel:                 $KERNEL"
echo "  Distribution:           $DISTRIBUTION"
echo "  Package manager:        $PACKAGE_MANAGER"

case $ARCHITECTURE in
	x86)		CC_MARCH=i686		;;
	x86_64|amd64)	CC_MARCH=k8		;;
	*)		CC_MARCH=$ARCHITECTURE	;;
esac

configure() {
	sed -e "s|@ARCH@|$ARCHITECTURE|" $1 > $1.tmp
	mv $1.tmp $1
	sed -e "s|@KERNEL@|$KERNEL|" $1 > $1.tmp
	mv $1.tmp $1
	sed -e "s|@VERSION@|$VERSION|" $1 > $1.tmp
	mv $1.tmp $1
	sed -e "s|@DISTRIBUTION@|$DISTRIBUTION|" $1 > $1.tmp
	mv $1.tmp $1
	sed -e "s|@PACKAGE_MANAGER@|$PACKAGE_MANAGER|" $1 > $1.tmp
	mv $1.tmp $1
	sed -e "s|@MARCH@|$CC_MARCH|" $1 > $1.tmp
	mv $1.tmp $1
	sed -e "s|@GMAKE@|$GMAKE_PATH|" $1 > $1.tmp
	mv $1.tmp $1
}

echo "Creation of \`Makefile'..."
DIR () {
	echo "@echo -e \"  \033[34mMKDIR\033[00m        \033[37m$1\033[00m\";[ -d \$(DESTDIR)/$1 ] || mkdir -p \$(DESTDIR)/$1"
}
INSTALL () {
	echo "@echo -e \"  \033[32mINSTALL\033[00m      \033[37m$2\033[00m -> \033[37m$3/$2\033[00m\";install -m$1 $2 \$(DESTDIR)/$3/$2"
}
REMOVE () {
	echo "@echo -e \"  \033[33mREMOVE\033[00m       \033[37m$1\033[00m\";[ -e $1 ] && rm -rf $1 || true"
}
RULE () {
	echo "@echo -e \"  \033[37m$1\033[00m  \t $2\""
}
cat > Makefile << EOF
# Begin of Makefile

DESTDIR = 
BINDIR = $EPREFIX/bin
SHAREDIR = $PREFIX/share
ETCDIR = /etc
MANDIR = \$(SHAREDIR)/man

PKGXX_VERSION=$VERSION

help:
	@echo "The available rules for this Makefile are:"
	`RULE "config   " "Install the configuration files of pkg++."`
	`RULE "man      " "Install the manual pages of pkg++."`
	`RULE "pkgxx    " "Install pkgxx, it's include files and the defaults file."`
	`RULE "update   " "Make the man and pkgxx rules."`
	`RULE "install  " "Nake the man, pkgxx and config rules."`
	`RULE "clean    " "Remove configured files."`

config:
	`DIR \$\(ETCDIR\)`
	`INSTALL 0644 pkg++.conf \$\(ETCDIR\)`

man:
	`DIR \$\(MANDIR\)`
	`DIR \$\(MANDIR\)/man8`
	`DIR \$\(MANDIR\)/man5`
	`INSTALL 0644 pkg++.8 \$\(MANDIR\)/man8`
	`INSTALL 0644 pkg++.conf.5 \$\(MANDIR\)/man5`
	`INSTALL 0644 pkgfile.5 \$\(MANDIR\)/man5`

pkgxx:
	`DIR \$\(BINDIR\)`
	`DIR \$\(SHAREDIR\)/pkg++/includes`
	`DIR \$\(SHAREDIR\)/pkg++/defaults`
	`DIR \$\(ETCDIR\)/pkg++`
	`INSTALL 0755 pkg++ \$\(BINDIR\)`
	`for include in $(ls includes/); do
		INSTALL 0644 includes/$include \$\(SHAREDIR\)/pkg++
		echo -ne "\t"
	done`
	@mv defaults/prefixes		prefixes
	@mv defaults/distributions	distributions
	`INSTALL 0644 prefixes		\$\(ETCDIR\)/pkg++`
	`INSTALL 0644 distributions	\$\(ETCDIR\)/pkg++`
	@rm prefixes
	@rm distributions

update: pkgxx man

install: pkgxx config man

clean:
	`REMOVE pkg++`
	`REMOVE pkg++.8`
	`REMOVE pkg++.conf`
	`REMOVE pkg++.conf.5`
	`REMOVE Makefile`
	`REMOVE defaults/distributions`
	`REMOVE defaults/prefixes`

pkgfiles:
	sed -e "s|@VERSION@|\${PKGXX_VERSION}|g" Pkgfile.Crux.in > Pkgfile.Crux
	sed -e "s|@VERSION@|\${PKGXX_VERSION}|g" Pkgfile.Nutritive.in > Pkgfile.Nutritive
	sed -e "s|@VERSION@|\${PKGXX_VERSION}|g" Pkgfile.NuTyX.in > Pkgfile.NuTyX
	sed -e "s|@VERSION@|\${PKGXX_VERSION}|g" Pkgfile.devel.in > Pkgfile.devel

# End of file
EOF

[[ -e pkg++ ]] && rm pkg++
if $USE_CURL; then
	echo "#define curl curl" >> pkg++
fi
if $USE_GSED; then
	echo "#define gsed gsed" >> pkg++
fi
if $USE_GFIND; then
	echo "#define gfind gfind" >> pkg++
fi
if $USE_GTAR && [[ -n "$GTAR_NAME" ]] && ! $USE_BSDTAR; then
	echo "#define gtar $GTAR_NAME" >> pkg++
else
	echo "#define bsdtar bsdtar" >> pkg++
fi

case $DISTRIBUTION in
	Debian)		echo "#define debian debian"		>> defaults/distributions ;;
	Frugalware)	echo "#define frugalware frugalware"	>> defaults/distributions ;;
	Crux)		echo "#define crux crux"		>> defaults/distributions ;;
	Mandriva)	echo "#define mandriva mandriva"	>> defaults/distributions ;;
	Arch)		echo "#define arch arch"		>> defaults/distributions ;;
	Slackware)	echo "#define slackware slackware"	>> defaults/distributions ;;
esac

case $PACKAGE_MANAGER in
	dpkg)
		echo "#define dpkg dpkg"		>> defaults/distributions
		echo "#define dpkg dpkg"		>> pkg++
	;;
	pacman-g2)
		echo "#define pacmang2 pacmang2"	>> defaults/distributions
		echo "#define fpm fpm"			>> pkg++
	;;
	pkgutils)
		echo "#define pkgutils pkgutils"	>> defaults/distributions
		echo "#define pkgutils pkgutils"	>> pkg++
	;;
	pkgtools)
		echo "#define pkgtools pkgtools"	>> defaults/distributions
		echo '#define pkgtools pkgtools'	>> pkg++
	;;
	rpm)
		echo "#define rpm rpm"			>> defaults/distributions
		echo "#define rpm rpm"			>> pkg++
	;;
esac
cat "pkg++.in" >> "pkg++"
cat "defaults/distributions.in" >> "defaults/distributions"
gcc -E -x c -P "pkg++" >> "pkg++.tmp"
gcc -E -x c -P "defaults/prefixes.in" >> "defaults/prefixes"
gcc -E -x c -P "defaults/distributions" >> "defaults/distributions.tmp"
configure "defaults/distributions.tmp"
mv defaults/distributions.tmp defaults/distributions
echo "#!/usr/bin/env bash" > "pkg++"
cat "pkg++.tmp" >> "pkg++"
rm pkg++.tmp
cp "pkg++.conf.in" "pkg++.conf"
cp "pkg++.8.in" "pkg++.8"
cp "pkg++.conf.5.in" "pkg++.conf.5"
configure "pkg++"
configure "pkg++.8"
configure "pkg++.conf"
configure "pkg++.conf.5"
configure "pkgfile.5"

echo "Configuration done."

